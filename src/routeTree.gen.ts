/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UserDashboardImport } from './routes/user-dashboard'
import { Route as LoginFormImport } from './routes/loginForm'
import { Route as ListingsImport } from './routes/listings'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const UserDashboardRoute = UserDashboardImport.update({
  id: '/user-dashboard',
  path: '/user-dashboard',
  getParentRoute: () => rootRoute,
} as any)

const LoginFormRoute = LoginFormImport.update({
  id: '/loginForm',
  path: '/loginForm',
  getParentRoute: () => rootRoute,
} as any)

const ListingsRoute = ListingsImport.update({
  id: '/listings',
  path: '/listings',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/listings': {
      id: '/listings'
      path: '/listings'
      fullPath: '/listings'
      preLoaderRoute: typeof ListingsImport
      parentRoute: typeof rootRoute
    }
    '/loginForm': {
      id: '/loginForm'
      path: '/loginForm'
      fullPath: '/loginForm'
      preLoaderRoute: typeof LoginFormImport
      parentRoute: typeof rootRoute
    }
    '/user-dashboard': {
      id: '/user-dashboard'
      path: '/user-dashboard'
      fullPath: '/user-dashboard'
      preLoaderRoute: typeof UserDashboardImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/listings': typeof ListingsRoute
  '/loginForm': typeof LoginFormRoute
  '/user-dashboard': typeof UserDashboardRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/listings': typeof ListingsRoute
  '/loginForm': typeof LoginFormRoute
  '/user-dashboard': typeof UserDashboardRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/listings': typeof ListingsRoute
  '/loginForm': typeof LoginFormRoute
  '/user-dashboard': typeof UserDashboardRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/listings' | '/loginForm' | '/user-dashboard'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/listings' | '/loginForm' | '/user-dashboard'
  id: '__root__' | '/' | '/listings' | '/loginForm' | '/user-dashboard'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ListingsRoute: typeof ListingsRoute
  LoginFormRoute: typeof LoginFormRoute
  UserDashboardRoute: typeof UserDashboardRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ListingsRoute: ListingsRoute,
  LoginFormRoute: LoginFormRoute,
  UserDashboardRoute: UserDashboardRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/listings",
        "/loginForm",
        "/user-dashboard"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/listings": {
      "filePath": "listings.tsx"
    },
    "/loginForm": {
      "filePath": "loginForm.tsx"
    },
    "/user-dashboard": {
      "filePath": "user-dashboard.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
